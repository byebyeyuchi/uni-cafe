{"ast":null,"code":"import _classCallCheck from \"/Users/yuqiliu/Desktop/PROJECT/js-proj/jojo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yuqiliu/Desktop/PROJECT/js-proj/jojo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/yuqiliu/Desktop/PROJECT/js-proj/jojo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/yuqiliu/Desktop/PROJECT/js-proj/jojo/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/yuqiliu/Desktop/PROJECT/js-proj/jojo/client/src/pages/LandingPage/GoogleMap.js\";\nimport React, { Component } from 'react';\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nexport var MapContainer = /*#__PURE__*/function (_Component) {\n  _inherits(MapContainer, _Component);\n\n  var _super = _createSuper(MapContainer);\n\n  function MapContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function (address) {\n      _this.setState({\n        address: address\n      });\n    };\n\n    _this.handleSelect = function (address) {\n      _this.setState({\n        address: address\n      });\n\n      geocodeByAddress(address).then(function (results) {\n        return getLatLng(results[0]);\n      }).then(function (latLng) {\n        console.log('Success', latLng); // update center state\n\n        _this.setState({\n          mapCenter: latLng\n        });\n      })[\"catch\"](function (error) {\n        return console.error('Error', error);\n      });\n    };\n\n    _this.state = {\n      // for google map places autocomplete\n      address: '',\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      mapCenter: {\n        lat: 49.2827291,\n        lng: -123.1207375\n      }\n    };\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"googleMaps\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n        value: this.state.address,\n        onChange: this.handleChange,\n        onSelect: this.handleSelect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }, function (_ref) {\n        var getInputProps = _ref.getInputProps,\n            suggestions = _ref.suggestions,\n            getSuggestionItemProps = _ref.getSuggestionItemProps,\n            loading = _ref.loading;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps({\n          placeholder: 'Search Places ...',\n          className: 'location-search-input'\n        }), {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }\n        }, loading && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }\n        }, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: '#fafafa',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 21\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 23\n            }\n          }, suggestion.description));\n        })));\n      }), /*#__PURE__*/React.createElement(Map, {\n        google: this.props.google,\n        initialCenter: {\n          lat: this.state.mapCenter.lat,\n          lng: this.state.mapCenter.lng\n        },\n        center: {\n          lat: this.state.mapCenter.lat,\n          lng: this.state.mapCenter.lng\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Marker, {\n        position: {\n          lat: this.state.mapCenter.lat,\n          lng: this.state.mapCenter.lng\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyAEdfLrhxTA-SOEPvj_CJxyQENNw8K5HVM'\n})(MapContainer);","map":{"version":3,"sources":["/Users/yuqiliu/Desktop/PROJECT/js-proj/jojo/client/src/pages/LandingPage/GoogleMap.js"],"names":["React","Component","Map","Marker","GoogleApiWrapper","PlacesAutocomplete","geocodeByAddress","getLatLng","MapContainer","props","handleChange","address","setState","handleSelect","then","results","latLng","console","log","mapCenter","error","state","showingInfoWindow","activeMarker","selectedPlace","lat","lng","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","google","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // for google map places autocomplete\n      address: '',\n\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n  \n      mapCenter: {\n        lat: 49.2827291,\n        lng: -123.1207375\n      }\n    };\n  }\n\n  handleChange = address => {\n    this.setState({ address });\n  };\n \n  handleSelect = address => {\n    this.setState({ address });\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => {\n        console.log('Success', latLng);\n\n        // update center state\n        this.setState({ mapCenter: latLng });\n      })\n      .catch(error => console.error('Error', error));\n  };\n \n  render() {\n    return (\n      <div id='googleMaps'>\n        <PlacesAutocomplete\n          value={this.state.address}\n          onChange={this.handleChange}\n          onSelect={this.handleSelect}\n        >\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n            <div>\n              <input\n                {...getInputProps({\n                  placeholder: 'Search Places ...',\n                  className: 'location-search-input',\n                })}\n              />\n              <div className=\"autocomplete-dropdown-container\">\n                {loading && <div>Loading...</div>}\n                {suggestions.map(suggestion => {\n                  const className = suggestion.active\n                    ? 'suggestion-item--active'\n                    : 'suggestion-item';\n                  // inline style for demonstration purpose\n                  const style = suggestion.active\n                    ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                    : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                  return (\n                    <div\n                      {...getSuggestionItemProps(suggestion, {\n                        className,\n                        style,\n                      })}\n                    >\n                      <span>{suggestion.description}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </PlacesAutocomplete>\n\n        <Map \n          google={this.props.google}\n          initialCenter={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }}\n          center={{\n            lat: this.state.mapCenter.lat,\n            lng: this.state.mapCenter.lng\n          }}\n        >\n          <Marker \n            position={{\n              lat: this.state.mapCenter.lat,\n              lng: this.state.mapCenter.lng\n            }} />\n        </Map>\n      </div>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyAEdfLrhxTA-SOEPvj_CJxyQENNw8K5HVM')\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}